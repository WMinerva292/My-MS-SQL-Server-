
--SQL SERVER - CASE STUDY 1
----------------------------------------------------------------------------

--Problem Statement:

--You are a database administrator. You want to use the data to answer afewquestions about your customers, 
--especially about the sales and profit comingfrom different states, money spent in marketing and various other 
--factorssuchasCOGS (Cost of Goods Sold), budget profit etc. You plan on using theseinsightsto help find out which
--items are being sold the most. You have beenprovidedwith the sample of the overall customer data due to privacy issues. 
--But youhopethat these samples are enough for you to write fully functioning SQLqueriestohelp answer the questions.

--Dataset:

--The 3 key datasets for this case study:

--a. FactTable: The Fact Table has 14 columns mentioned belowand4200rows. Date, ProductID, Profit, Sales, Margin, COGS, 
--Total Expenses, Marketing, Inventory, Budget Profit, Budget COGS, Budget Margin, Budget Sales, and Area Code
--Note: COGS stands for Cost of Goods Sold

--b. ProductTable: The ProductTable has four columns named Product Type, Product, ProductID, and Type. It has 13 rows 
--which can be brokendowninto further details to retrieve the information mentioned in theFactTable. 

--c. LocationTable: Finally, the LocationTable has 156 rows and follows a similar approach to ProductTable. It has 
--four columns named AreaCode, State, Market, and Market Size. 

--Tasks to be performed:

--1. Display the number of states present in the Location Table. 
--2. How many products are of regular type?
--3. How much spending has been done on marketing of product ID 1?
--4. What is the minimum sales of a product?
--5. Display the max Cost of Good Sold (COGS). 
--6. Display the details of the product where product type is coffee. 
--7. Display the details where total expenses are greater than 40. 
--8. What is the average sales in area code 719?
--9. Find out the total profit generated by Colorado state.
--10. Display the average inventory for each product ID. 
--11. Display state in a sequential order in a Location Table. 
--12. Display the average budget of the Product where the average budget margin should be greater than 100. 
--13. What is the total sales done on date 2010-01-01?
--14. Display the average total expense of each product ID on an individual date. 
--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code. 
--16. Display the rank without any gap to show the sales wise rank. 
--17. Find the state wise profit and sales. 
--18. Find the state wise profit and sales along with the productname. 
--19. If there is an increase in sales of 5%, calculate the increased sales. 
--20. Find the maximum profit along with the product ID and product type. 
--21. Create a stored procedure to fetch the result according to the product type from Product Table. 
--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss. 
--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order. 
--24. Apply union and intersection operator on the tables which consist of attribute area code. 
--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference. 
--26. Change the product type from coffee to tea where product ID is 1 and undo it. 
--27. Display the date, product ID and sales where total expenses are between 100 to 200. 
--28. Delete the records in the Product Table for regular type. 
--29. Display the ASCII value of the fifth character from the column Product.

--Answer:

--Lets create a database name CaseStudy1 and use it.
--Query:

CREATE DATABASE CaseStudy1

USE CaseStudy1

--Lets import the dataset Product, Fact and Location files. 
--Then, we have,

SELECT * FROM Product
SELECT * FROM Fact
SELECT * FROM Location

--Tasks as performed are:-

--1. To display the number of states present in the Location Table.
--Query:

SELECT COUNT(DISTINCT STATE)AS count_states FROM LOCATION

--2. To display how many products are of regular type.
--Query:

SELECT COUNT(Product)AS count_product 
FROM Product where Type='Regular';

--3. To find how much spending has been done on marketing of product ID 1.
--Query:

SELECT SUM(Marketing) AS Total_spending 
FROM Fact WHERE ProductID=1;

--4. To display the minimum sales of a product.
--Query:

SELECT MIN(Sales)AS Min_sales FROM Fact;

--5. To display the max Cost of Good Sold (COGS).
--Query:

SELECT MAX(COGS)AS MAX_COGS FROM Fact

--6. To display the details of the product where product type is coffee.
--Query:

SELECT * FROM Product 
WHERE product_type='coffee'

--7. To display the details where total expenses are greater than 40.
--Query:

SELECT * FROM fact WHERE Total_Expenses > 40

--8. To display the average sales in area code 719.
--Query: 

SELECT AVG(sales)AS avg_sales 
FROM FACT 
WHERE Area_Code=719

--9. To find out the total profit generated by Colorado state.
--Query:

SELECT SUM(profit)AS total_profit 
FROM fact f INNER JOIN LOCATION l
ON f.area_code=l.area_code WHERE state='Colorado'

--10. To display the average inventory for each product ID. 
--Query:

SELECT productid, AVG(inventory) avg_inventory FROM fact 
GROUP BY productid
ORDER BY productid

--11. To display state in a sequential order in a Location Table. 
--Query:

SELECT * FROM Location ORDER BY State DESC

--12. To display the average budget of the Product where the average budget margin should be greater than 100. 
--Query:

SELECT productid, AVG(budget_margin)as average FROM fact
GROUP BY productid HAVING AVG(budget_margin)>100
ORDER BY productid

--13. The total sales done on date 2010-01-01.
--Query:

SELECT SUM(sales) total_sales FROM fact
WHERE date='2010-01-01'

--14. To display the average total expense of each product ID on an individual date. 
--Query:

SELECT productid, date, AVG(total_expenses)AS avg_exp FROM fact
GROUP BY productid, date
ORDER BY productid, date

--15. To display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code. 
--Query:

SELECT f.date, f.productid, p.product_type, p.product, f.sales, f.profit, l.state, l.area_code 
FROM fact f JOIN product p 
ON f.productid=p.productid 
JOIN location l 
ON f.area_code=l.area_code
ORDER BY productid, date

--16. To display the rank without any gap to show the sales wise rank. 
--Query:

SELECT Sales, DENSE_RANK() OVER(ORDER BY Sales ASC)AS Sales_wise_rank FROM Fact

--17. To find the state wise profit and sales. 
--Query:
SELECT State, SUM(profit)as Total_profit, SUM(sales)as Total_Sales 
FROM Fact f JOIN location l 
ON f.area_code=l.area_code 
GROUP BY State


--18. To find the state wise profit and sales along with the productname. 
--Query:

SELECT Product, State, SUM(Profit)AS Total_profit,SUM(Sales)AS Total_Sales 
FROM fact f JOIN Location l 
ON f.area_code=l.area_code JOIN product p 
ON p.productid=f.productid
GROUP BY Product, State

--19. To calculate the increased sales if there is an increase in sales of 5%.
--Query:

SELECT Sales, sales*1.05 AS Increased_sales FROM Fact


--20. To find the maximum profit along with the product ID and product type. 
--Query:

SELECT p.ProductId, p.Product_Type, MAX(Profit)AS maximum_profit
FROM Fact F JOIN Product p 
ON F.productid=p.productid
GROUP BY P.Productid, P.Product_type

--21. To create a stored procedure to fetch the result according to the product type from Product Table. 
--Query:

CREATE PROCEDURE P @pt VARCHAR(50)
AS
SELECT * FROM Product WHERE Product_type=@pt

EXEC P @pt='Tea'

--22. To write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss. 
--Query:

SELECT Total_expenses, IIF(Total_expenses<60, 'Profit', 'Loss')AS Status
FROM Fact

--23. To give the total weekly sales value with the date and productID details with roll-up to pull the data in hierarchical order. 
--Query:

SELECT Date, ProductId, SUM(Sales) Week_sales, DATEPART(Week, Date)AS Week FROM Fact 
GROUP BY DATEPART(Week, Date), Date, ProductId 
WITH ROLLUP;

--24. To apply union and intersection operator on the tables which consist of attribute area code. 
--Query:

SELECT Area_code FROM Fact
UNION
SELECT Area_code FROM Location

SELECT Area_code FROM Fact
INTERSECT
SELECT Area_code FROM Location

--25. To create a user-defined function for the product table to fetch a particular product type based upon the user’s preference. 
--Query:

CREATE FUNCTION Pr(@pt1 VARCHAR(50))
RETURNS TABLE
AS
RETURN SELECT * FROM Product WHERE Product_type=@pt1

SELECT * FROM Pr('coffee')

--26. To change the product type from coffee to tea where product ID is 1 and undo it. 
--Query:

BEGIN TRANSACTION
UPDATE Product 
SET Product_type='Tea' WHERE ProductId=1

SELECT * FROM Product

ROLLBACK TRANSACTION

--27. To display the date, product ID and sales where total expenses are between 100 to 200. 
--Query:

SELECT Date, ProductId, Sales, Total_expenses FROM Fact
WHERE Total_expenses BETWEEN 100 AND 200

--28. To delete the records in the Product Table for regular type. 
--Query:

DELETE FROM Product WHERE Type='regular';

SELECT * FROM Product

--29. To display the ASCII value of the fifth character from the column Product, 
--we will be using the substring function.
--Query:

SELECT Product, ASCII(SUBSTRING(Product,5,1))AS ASCII_value FROM Product;

---------------------------------------------------------------------------------------------------